{"version":3,"sources":["components/api/api.js","components/purchases/purchase.js","components/layout/Header.js","components/purchases/purchase_add.js","App.js","serviceWorker.js","index.js"],"names":["axios","create","baseURL","Purchase","onGridRowsUpdated","_ref","fromRow","toRow","updated","Object","toConsumableArray","_this","props","purchase","provider","onRowUpdate","handleFilterChange","filter","console","log","filterTerm","column","key","filterPurchase","state","toString","toLowerCase","indexOf","productName","product","setState","nextProps","nextContext","nextState","prevProps","prevState","snapshot","args","_this2","this","window","confirm","Api","delete","rowId","then","res","getPurchase","catch","error","alert","_this3","defaultColumnProperties","resizable","columns","name","editable","width","filterable","events","onClick","ev","onDelete","map","c","objectSpread","isLoading","react_default","a","createElement","react_data_grid_default","toolbar","react_data_grid_addons","enableFilter","onAddFilter","rowGetter","i","rowsCount","length","enableCellSelect","minHeight","enableCellAutoFocus","Component","Header","className","PurchaseAdd","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onCreateAtChange","date","moment","format","formatedDate","createdAt","now","onProviderChange","e","target","value","onProductChange","onQuantityChange","quantity","onPriceChange","price_purchase","onRemarkChange","remark","onSubmit","preventDefault","post","products","purchaseDate","location","reload","Date","bind","assertThisInitialized","es","selected","onChange","dateFormat","isClearable","margin","TextField","id","type","placeholder","Fab","size","color","aria-label","App","get","data","purchases","index","totalPrice","currentQuantity","marketPrice","rows","requestBody","_loop","updatedRow","patch","updatedPurchase","layout_Header","purchases_purchase_add","components_purchases_purchase","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1221810e.chunk.js","sourcesContent":["import axios from 'axios'\n\nexport default axios.create({\n    baseURL: (process.env.NODE_ENV !== 'production') ? 'http://localhost:3004/' : 'http://52.199.253.219:3004/'\n});\n\n\n","import React, {Component} from 'react';\nimport './purchase.css'\nimport ReactDataGrid from 'react-data-grid';\nimport {Toolbar} from 'react-data-grid-addons'\n\nimport Api from \"../api/api\";\n\n\nclass Purchase extends Component {\n\n    /// Lifecycle\n    // Begin...\n    componentWillMount() {\n        console.log(\"componentWillMount...\") //1\n    }\n\n    componentDidMount() {\n        console.log(\"componentDidMount...\") //2\n    }\n\n    // If update happen..\n    componentWillReceiveProps(nextProps, nextContext) {\n        console.log(\"componentWillReceiveProps...\") //3\n    }\n\n    componentWillUpdate(nextProps, nextState, nextContext) {\n        console.log(\"componentWillUpdate...\") //4\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        console.log(\"componentDidUpdate...\") //5\n    }\n    // Update end.\n    // End.\n\n    // Update -> notify parent\n    onGridRowsUpdated = ({fromRow, toRow, updated}) => {\n        //如果没有变 return\n        let updatedPurchase = [...this.props.purchase]\n        if (updatedPurchase[fromRow].provider === updated.provider){\n            return\n        }\n\n        this.props.onRowUpdate(fromRow, toRow, updated)\n    };\n\n    // Update\n    handleFilterChange = (filter) => {\n        console.log('filterTerm: ' + filter.filterTerm)\n        console.log('filter key: ' + filter.column.key)\n        let filterPurchase = this.state.purchase\n        if (!filter.filterTerm) {\n            this.setState({\n                filterPurchase: this.state.purchase\n            })\n            return\n        }\n\n        filterPurchase = filterPurchase.filter((purchase) => {\n            //1 product\n            if (filter.column.key === 'provider') {\n                let providerName = purchase.provider.toString().toLowerCase()\n                return providerName.indexOf(\n                    filter.filterTerm.toString().toLowerCase()) !== -1\n            }\n            //2 provider\n            if (filter.column.key === 'product') {\n                let productName = purchase.product.toString().toLowerCase()\n                console.log('productName: ' + productName)\n\n                return productName.indexOf(\n                    filter.filterTerm.toString().toLowerCase()) !== -1\n            }\n        })\n        this.setState({\n            filterPurchase: filterPurchase\n        })\n    };\n\n    //Delete\n    onDelete(args) {\n        if (!window.confirm(\"确定删除？\")) {\n            return\n        }\n        Api.delete('purchase/' + args.rowId)\n            .then(res => {\n                console.log(res)\n                this.getPurchase()\n            }).catch(error => {\n            alert(error)\n        })\n    }\n\n    render() {\n        const defaultColumnProperties = {\n            resizable: true,\n        };\n        const columns = [\n            {key: 'index', name: 'No.', editable: false, width: 50},\n            {key: 'purchaseDate', name: '日期', editable: true, width: 100},\n            {key: 'provider', name: '供应商', editable: true, filterable: true, width: 250},\n            {key: 'product', name: '商品名', editable: true, filterable: true, width: 250},\n            {key: 'quantity', name: '数量', editable: true, width: 50},\n            {key: 'price_purchase', name: '单价($HKD)', editable: true, width: 120},\n            {key: 'totalPrice', name: '总价($HKD)', editable: false, width: 120},\n            {key: 'currentQuantity', name: '存量', editable: true, width: 50},\n            {key: 'marketPrice', name: '定价($HKD)', editable: true, width: 120},\n            {key: 'remark', name: 'Remark', editable: true},\n            {\n                key: 'delete', name: '操作', editable: false,\n                events: {\n                    onClick: (ev, args) => {\n                        this.onDelete(args);\n                    }\n                }\n            },\n        ].map(c => ({...c, ...defaultColumnProperties}));\n\n        if (this.props.isLoading) {\n            return <p>Loading....</p>\n        }\n\n        return (\n            <div>\n                <h3>采购列表</h3>\n\n                <ReactDataGrid\n                    toolbar={<Toolbar enableFilter={true}/>}\n                    onAddFilter={this.handleFilterChange}\n                    columns={columns}\n                    rowGetter={i => this.props.purchase[i]}\n                    rowsCount={this.props.purchase.length}\n                    enableCellSelect={true}\n                    minHeight={500}\n                    enableCellAutoFocus={false}\n                    onGridRowsUpdated={this.onGridRowsUpdated}\n                />\n            </div>\n        );\n    }\n\n}\n\n\nexport default Purchase;\n","import React from \"react\";\nimport './Header.css'\n\nfunction Header() {\n    return (\n        <header className=\"km-header\">\n            <title>KitMan Store</title>\n            <p>KitMan Store </p>\n        </header>\n    )\n}\n\nexport default Header","import React, {Component} from 'react';\nimport './purchase_add.css'\nimport Api from \"../api/api\";\n\nimport TextField from '@material-ui/core/TextField';\nimport Fab from '@material-ui/core/Fab';\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport moment from \"moment\";\n\nclass PurchaseAdd extends Component {\n    constructor() {\n        super()\n        this.state = {\n            createdAt: moment(new Date()).format('YYYY-MM-DD'),\n            provider: '',\n            product: '',\n            quantity: '',\n            price_purchase: '',\n            remark: '',\n            // open: false,\n            // error: 'Error!!!',\n            now: new Date()\n        }\n        this.onCreateAtChange = this.onCreateAtChange.bind(this);\n    }\n\n\n    onCreateAtChange = (date) => {\n        console.log('onCreateAtChange: ' + moment(date).format('YYYY-MM-DD'))\n        let formatedDate = moment(date).format('YYYY-MM-DD')\n\n        this.setState({\n            createdAt: formatedDate,\n            now: date\n        });\n    }\n\n    onProviderChange = (e) => {\n        console.log('onProviderChange: ' + e.target.value)\n        this.setState({\n            provider: e.target.value\n        });\n    }\n\n    onProductChange = (e) => {\n        console.log('onProductChange: ' + e.target.value)\n        this.setState({\n            product: e.target.value\n        });\n    }\n\n    onQuantityChange = (e) => {\n        console.log('onQuantityChange: ' + e.target.value)\n        this.setState({\n            quantity: e.target.value\n        });\n    }\n\n    onPriceChange = (e) => {\n        console.log('onPriceChange: ' + e.target.value)\n        this.setState({\n            price_purchase: e.target.value\n        });\n    }\n\n    onRemarkChange = (e) => {\n        console.log('onRemarkChange: ' + e.target.value)\n        this.setState({\n            remark: e.target.value\n        });\n    }\n\n    // handleClickOpen = (error) => {\n    //     ErrorDialog.setState({\n    //         error: error,\n    //         open: true\n    //     })\n    // };\n\n    onSubmit = (e) => {\n        e.preventDefault()\n        console.log(this.state)\n        if (!this.state.provider) {\n            console.log('provider empty')\n            alert('供应商必填')\n            return\n        }\n        if (!this.state.product) {\n            console.log('product empty')\n            alert('商品名必填')\n            return\n        }\n        if (!this.state.quantity) {\n            console.log('quantity empty')\n            alert('数量必填')\n            return\n        }\n        if (!this.state.price_purchase) {\n            console.log('price_purchase empty')\n            alert('价格必填')\n            return\n        }\n        Api.post('purchase', {\n            products: {\n                name: this.state.product,\n                quantity: this.state.quantity,\n                price_purchase: this.state.price_purchase,\n                provider: {\n                    name: this.state.provider\n                },\n                remark: this.state.remark,\n                purchaseDate: this.state.createdAt\n            }\n        }).then(res => {\n            console.log(res)\n            window.location.reload()\n            //purchase.js refresh data\n        }).catch(error => {\n            console.log('e: ' + error)\n            alert(error)\n        })\n    }\n\n    render() {\n        return (\n            <div>\n                {/*<ErrorDialog open={this.state.open} error={this.state.error}/>*/}\n                <h3>添加采购记录</h3>\n                <form onSubmit={this.onSubmit} className={'form_add'}>\n                    <DatePicker\n                        selected={this.state.now}\n                        onChange={this.onCreateAtChange}\n                        dateFormat=\"yyyy-MM-dd\"\n                        isClearable={true}\n                        className={'datePicker add_item'}\n                        name=\"createdAt\"\n                        margin=\"small\"\n\n                    />\n                    <TextField\n                        id=\"filled-required\"\n                        type=\"text\"\n                        name=\"provider\"\n                        placeholder=\"供应商\"\n                        value={this.state.provider}\n                        onChange={this.onProviderChange}\n                        className={'add_item'}\n                    />\n                    <TextField\n                        id=\"filled-required\"\n                        type=\"text\"\n                        name=\"product\"\n                        placeholder=\"商品名\"\n                        value={this.state.product}\n                        onChange={this.onProductChange}\n                        className={'add_item'}\n                    />\n                    <TextField\n                        id=\"filled-required\"\n                        type=\"number\"\n                        name=\"quantity\"\n                        placeholder=\"数量\"\n                        value={this.state.quantity}\n                        onChange={this.onQuantityChange}\n                        className={'add_item_small'}\n                    />\n                    <TextField\n                        id=\"filled-required\"\n                        type=\"number\"\n                        name=\"price_purchase\"\n                        placeholder=\"单价\"\n                        value={this.state.price_purchase}\n                        onChange={this.onPriceChange}\n                        className={'add_item_small'}\n                    />\n                    <TextField\n                        id=\"filled-name\"\n                        type=\"text\"\n                        name=\"remark\"\n                        placeholder=\"Remark\"\n                        value={this.state.remark}\n                        onChange={this.onRemarkChange}\n                        className={'add_item'}\n                    />\n\n                    <Fab size=\"medium\" color=\"primary\" aria-label=\"Add\" type=\"submit\" name=\"submit\">\n                        +\n                    </Fab>\n                    {/*<input*/}\n                    {/*type=\"submit\"*/}\n                    {/*name=\"submit\"*/}\n                    {/*value=\"增加\"*/}\n                    {/*className=\"btn\"*/}\n                    {/*/>*/}\n                </form>\n            </div>\n\n        )\n    }\n}\n\nexport default PurchaseAdd;\n","import React, {Component} from 'react';\n\nimport './App.css';\n\nimport Purchase from \"./components/purchases/purchase\";\nimport Header from \"./components/layout/Header\";\nimport PurchaseAdd from \"./components/purchases/purchase_add\";\nimport Api from \"./components/api/api\";\nimport moment from \"moment\";\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            purchase: [],\n            isLoading: false,\n            filterPurchase: []\n        }\n        this.onRowUpdate = this.onRowUpdate.bind(this); // 自己都要update\n\n    }\n\n    componentDidMount() {\n        this.getPurchase();\n    }\n\n    /// List\n    getPurchase() {\n        Api.get('purchase')\n            .then(data => {\n                const filterPurchase = data.data.purchases.map((purchase, index) => {\n                    return {\n                        id: purchase.id,\n                        index: index + 1,\n                        createdAt: moment(new Date()).format('YYYY-MM-DD'),\n                        purchaseDate: moment(purchase.purchaseDate).format('YYYY-MM-DD'),\n                        provider: purchase.product.provider.name,\n                        product: purchase.product.name,\n                        quantity: purchase.product.quantity,\n                        price_purchase: purchase.product.price_purchase,\n                        totalPrice: purchase.product.price_purchase * purchase.product.quantity,\n                        currentQuantity: purchase.currentQuantity,\n                        marketPrice: purchase.marketPrice,\n                        remark: purchase.remark,\n                        delete: 'Delete'\n                    }\n                });\n                this.setState({\n                    purchase: filterPurchase,\n                    filterPurchase: filterPurchase,\n                    isLoading: false\n                })\n\n            })\n            .catch(error => {\n                alert(error)\n                console.log('e: ' + error)\n            })\n    }\n\n    // Update\n    onRowUpdate(fromRow, toRow, updated) {\n        console.log(\"update from child\")\n        console.log(updated)\n\n        const rows = this.state.purchase;\n        let requestBody = {}\n\n        for (let i = fromRow; i <= toRow; i++) {\n            const updatedRow = {...rows[i], ...updated}\n            console.log(updatedRow)\n            requestBody = {\n                products: updatedRow\n            }\n            Api.patch('purchase/' + updatedRow.id, requestBody).then((res) => {\n                console.log(res)\n                // update child - 1) update row\n\n                let updatedPurchase = [...this.state.filterPurchase]\n                updatedPurchase[fromRow] = updatedRow\n                this.setState({\n                    filterPurchase: updatedPurchase\n                })\n\n            }).catch(error => {\n                console.log(error)\n                alert(error)\n            })\n        }\n\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <Header/>\n                <PurchaseAdd/>\n\n                {/*onRowUpdate is provided for child to update something*/}\n                <Purchase purchase={this.state.filterPurchase}\n                          isLoading={this.state.isLoading}\n                          onRowUpdate={this.onRowUpdate} />\n            </div>\n        )\n    }\n\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}