{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport Transition from 'react-transition-group/Transition';\n/**\n * @ignore - internal component.\n */\n\nvar Ripple =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Ripple, _React$Component);\n\n  function Ripple() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Ripple);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Ripple)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      visible: false,\n      leaving: false\n    };\n\n    _this.handleEnter = function () {\n      _this.setState({\n        visible: true\n      });\n    };\n\n    _this.handleExit = function () {\n      _this.setState({\n        leaving: true\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Ripple, [{\n    key: \"render\",\n    value: function render() {\n      var _clsx, _clsx2;\n\n      var _this$props = this.props,\n          classes = _this$props.classes,\n          classNameProp = _this$props.className,\n          pulsate = _this$props.pulsate,\n          rippleX = _this$props.rippleX,\n          rippleY = _this$props.rippleY,\n          rippleSize = _this$props.rippleSize,\n          other = _objectWithoutProperties(_this$props, [\"classes\", \"className\", \"pulsate\", \"rippleX\", \"rippleY\", \"rippleSize\"]);\n\n      var _this$state = this.state,\n          visible = _this$state.visible,\n          leaving = _this$state.leaving;\n      var rippleClassName = clsx(classes.ripple, (_clsx = {}, _defineProperty(_clsx, classes.rippleVisible, visible), _defineProperty(_clsx, classes.ripplePulsate, pulsate), _clsx), classNameProp);\n      var rippleStyles = {\n        width: rippleSize,\n        height: rippleSize,\n        top: -(rippleSize / 2) + rippleY,\n        left: -(rippleSize / 2) + rippleX\n      };\n      var childClassName = clsx(classes.child, (_clsx2 = {}, _defineProperty(_clsx2, classes.childLeaving, leaving), _defineProperty(_clsx2, classes.childPulsate, pulsate), _clsx2));\n      return React.createElement(Transition, _extends({\n        onEnter: this.handleEnter,\n        onExit: this.handleExit\n      }, other), React.createElement(\"span\", {\n        className: rippleClassName,\n        style: rippleStyles\n      }, React.createElement(\"span\", {\n        className: childClassName\n      })));\n    }\n  }]);\n\n  return Ripple;\n}(React.Component);\n\nprocess.env.NODE_ENV !== \"production\" ? Ripple.propTypes = {\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * If `true`, the ripple pulsates, typically indicating the keyboard focus state of an element.\n   */\n  pulsate: PropTypes.bool,\n\n  /**\n   * Diameter of the ripple.\n   */\n  rippleSize: PropTypes.number,\n\n  /**\n   * Horizontal position of the ripple center.\n   */\n  rippleX: PropTypes.number,\n\n  /**\n   * Vertical position of the ripple center.\n   */\n  rippleY: PropTypes.number\n} : void 0;\nRipple.defaultProps = {\n  pulsate: false\n};\nexport default Ripple;","map":null,"metadata":{},"sourceType":"module"}